version: '3.8'

services:
  eureka-server:
    build: ./eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  api-gateway:
    build: ./api-gateway
    env_file:
      - .env
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9093:9093"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  resource-service-db:
    env_file:
      - .env
    image: postgres:alpine
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${RESOURCES_DB}
    volumes:
      - ./init-scripts/resource-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${RESOURCES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  storage-service-db:
    env_file:
      - .env
    image: postgres:alpine
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${STORAGES_DB}
    volumes:
      - ./init-scripts/storage-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${STORAGES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  song-service-db:
    env_file:
      - .env
    image: postgres:alpine
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${SONGS_DB}
    volumes:
      - ./init-scripts/song-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${SONGS_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  localstack:
    container_name: localstack
    image: localstack/localstack
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - SERVICES=s3
      - DEBUG=1
    volumes:
      - "./localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./localstack/init-scripts:/etc/localstack/init/ready.d"

  resource-service:
    build: ./resource-service
    env_file:
      - .env
    depends_on:
      resource-service-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      localstack:
        condition: service_healthy
      kafka:
        condition: service_healthy

  resource-processor:
    build: ./resource-processor
    env_file:
      - .env
    depends_on:
      resource-service:
        condition: service_started
      kafka:
        condition: service_healthy

  song-service:
    build: ./song-service
    env_file:
      - .env
    deploy:
      replicas: 2
    depends_on:
      song-service-db:
        condition: service_healthy
      resource-processor:
        condition: service_started
      eureka-server:
        condition: service_healthy

  storage-service:
    build: ./storage-service
    env_file:
      - .env
    depends_on:
      storage-service-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy

  elasticsearch:
    image: elastic/elasticsearch:8.17.5
    container_name: elasticsearch
    restart: always
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es-data:/usr/share/elasticsearch/data

  logstash:
    image: elastic/logstash:8.17.5
    container_name: logstash
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - "5000:5000"
    volumes:
      - ./logstash/pipeline/pipeline.conf:/usr/share/logstash/pipeline/pipeline.conf:ro

  kibana:
    image: elastic/kibana:8.17.5
    restart: always
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"

  prometheus:
    image: prom/prometheus:v2.53.4
    restart: always
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=15d"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: grafana/grafana:11.6.0
    container_name: grafana
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/etc/grafana/provisioning:ro
      - grafana:/var/lib/grafana

volumes:
  es-data:
  grafana: